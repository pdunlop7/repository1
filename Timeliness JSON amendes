{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "Dataviz by David Bacci: https://www.linkedin.com/in/davbacci/",
  "autosize": "pad",
  "background": "white",
  "padding": {
    "left": 10,
    "right": 10,
    "top": 10,
    "bottom": 10
  },
  "signals": [
    {"name": "y_step", "value": 33},
    {"name": "x_step", "value": 26},
    {
      "name": "days",
      "update": "data('days')[0]['days']"
    },
    {
      "name": "yPaddingInner",
      "value": 0.45
    },
    {
      "name": "yPaddingOuter",
      "value": 0.2
    },
    {
      "name": "taskColumn",
      "value": 130
    },
    {
      "name": "startColumn",
      "value": 45
    },
    {"name": "endColumn", "value": 45},
    {"name": "daysColumn", "value": 35},
    {
      "name": "progressColumn",
      "value": 55
    },
    {
      "name": "columnPadding",
      "value": 15
    },
    {
      "name": "height",
      "update": "bandspace(domain('y').length, yPaddingInner, yPaddingOuter) * y_step"
    },
    {
      "name": "ganttWidth",
      "update": "days * x_step"
    },
    {
      "name": "width",
      "update": "ganttWidth"
    },
    {
      "name": "length",
      "update": "span(domain('xDays'))"
    },
    {
      "name": "today",
      "update": "timeFormat(datetime(now()),'%m/%d/%y')"
    },
    {
      "name": "todayRule",
      "update": "today"
    }
  ],
  "data": [
    {"name": "dataset", "values":[{}]},
    {
      "name": "input",
      "source": "dataset",
      "transform": [
        {
          "type": "formula",
          "as": "encodedStart",
          "expr": "timeFormat(datum['start'],'%m/%d/%y')"
        },
        {
          "type": "formula",
          "as": "updatedEnd",
          "expr": "datetime(toNumber(datum['end'])+(1000*60*60*24))"
        },
        {
          "type": "formula",
          "as": "encodedEnd",
          "expr": "timeFormat(datum.updatedEnd,'%m/%d/%y')"
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "round((datum.updatedEnd-datum['start'])/1000/60/60/24)"
        },
        {
          "type": "formula",
          "as": "completionLabel",
          "expr": "datum['Progress (Number)'] + '%'"
        },
        {
          "type": "window",
          "sort": {
            "field": "start",
            "order": "ascending"
          },
          "ops": ["rank"],
          "as": ["taskSort"],
          "groupby": ["phase"]
        }
      ]
    },
    {
      "name": "phases",
      "source": "input",
      "transform": [
        {
          "type": "aggregate",
          "fields": [
            "start",
            "end",
            "Progress (Number)",
            "task",
            "Progress (Number)"
          ],
          "ops": [
            "min",
            "max",
            "sum",
            "count",
            "mean"
          ],
          "as": [
            "start",
            "end",
            "sum",
            "count",
            "Progress (Number)"
          ],
          "groupby": ["phase"]
        },
        {
          "type": "lookup",
          "from": "input",
          "key": "start",
          "values": ["encodedStart"],
          "fields": ["start"]
        },
        {
          "type": "lookup",
          "from": "input",
          "key": "end",
          "values": ["encodedEnd"],
          "fields": ["end"]
        },
        {
          "type": "formula",
          "as": "task",
          "expr": "datum['phase']"
        },
        {
          "type": "formula",
          "as": "taskSort",
          "expr": "0"
        },
        {
          "type": "formula",
          "as": "Progress (Number)",
          "expr": "round(datum['Progress (Number)'])"
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "round((datum['end']-datum['start'])/1000/60/60/24)+1"
        },
        {
          "type": "window",
          "sort": {
            "field": "start",
            "order": "ascending"
          },
          "ops": ["rank"],
          "as": ["phaseSort"]
        }
      ]
    },
    {
      "name": "tasks",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "datum['milestone'] != true"
        },
        {
          "type": "lookup",
          "from": "phases",
          "key": "phase",
          "values": ["phaseSort"],
          "fields": ["phase"]
        }
      ]
    },
    {
      "name": "milestones",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "datum['milestone'] == true"
        },
        {
          "type": "lookup",
          "from": "phases",
          "key": "phase",
          "values": ["phaseSort"],
          "fields": ["phase"]
        }
      ]
    },
    {
      "name": "y_scale",
      "source": [
        "tasks",
        "phases",
        "milestones"
      ],
      "transform": [
        {
          "type": "window",
          "sort": {
            "field": [
              "phaseSort",
              "taskSort"
            ],
            "order": [
              "ascending",
              "ascending"
            ]
          },
          "ops": ["row_number"],
          "as": ["finalSort"]
        }
      ]
    },
    {
      "name": "days",
      "source": "input",
      "transform": [
        {
          "type": "aggregate",
          "fields": ["start", "end"],
          "ops": ["min", "max"],
          "as": ["s", "e"]
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "round((datum.e-datum.s)/1000/60/60/24)"
        }
      ]
    },
    {
      "name": "dayScale",
      "transform": [
        {
          "type": "sequence",
          "start": -1,
          "stop": {"signal": "days+8"},
          "as": "sequence"
        },
        {
          "type": "formula",
          "as": "date",
          "expr": "datetime(toNumber(data('days')[0]['s'])+((1000*60*60*24)*datum.sequence))"
        },
        {
          "type": "formula",
          "as": "encodedDate",
          "expr": "timeFormat(datum.date,'%m/%d/%y')"
        }
      ]
    },
    {
      "name": "weekends",
      "source": "dayScale",
      "transform": [
        {
          "type": "filter",
          "expr": "day(datum.date) == 6 || day(datum.date) == 0"
        }
      ]
    },
    {
      "name": "dependencyArrows",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum.dependencies) && datum.dependencies!='' "
        }
      ]
    },
    {
      "name": "dependencyLines",
      "source": "y_scale",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum.dependencies) && datum.dependencies!='' "
        },
        {
          "type": "formula",
          "expr": "split(datum.dependencies,',')",
          "as": "dependencies"
        },
        {
          "type": "flatten",
          "fields": ["dependencies"]
        },
        {
          "type": "lookup",
          "from": "y_scale",
          "key": "id",
          "values": [
            "task",
            "finalSort",
            "encodedEnd",
            "start",
            "end"
          ],
          "fields": ["dependencies"],
          "as": [
            "sourceTask",
            "sourceFinalSort",
            "sourceEncodedEnd",
            "sourceStart",
            "sourceEnd"
          ]
        },
        {
          "type": "formula",
          "as": "a",
          "expr": "[scale('xDays',datum.rks": [
            {
              "name": "fills",
              "description": "Percent complete for each phase",
              "type": "rect",
              "clip": true,
              "encode": {
                "update": {
                  "x": {
                    "signal": "item.mark.group.x1"
                  },
                  "y": {
                    "signal": "item.mark.group.y1"
                  },
                  "height": {
                    "signal": "item.mark.group.height"
                  },
                  "width": {
                    "signal": "(item.mark.group.width/100)* item.mark.group.datum[completion]"
                  },
                  "fill": {
                    "signal": "item.mark.group.datum['phase']",
                    "scale": "cStroke"
                  },
                  "stroke": {
                    "signal": "item.mark.group.datum['phase']",
                    "scale": "cStroke"
                  },
                  "strokeWidth": {
                    "value": 2
                  },
                  "tooltip": {
                    "signal": "{'Phase':parent['phase'] ,'Task':parent['task'] , 'Start':timeFormat(parent['start'],'%a, %d %B %Y' ),'End':timeFormat(parent['end'],'%a, %d %B %Y' ), 'Days':parent.days,'Progress':parent[completion]+'%' }"
                  }
                }
              }
            },
            {
              "type": "path",
              "name": "phaseStart",
              "description": "Phase start",
              "encode": {
                "update": {
                  "x": {
                    "signal": "item.mark.group.x1"
                  },
                  "y": {
                    "signal": "item.mark.group.height"
                  },
                  "strokeWidth": {
                    "value": 0
                  },
                  "scaleX": {
                    "signal": "item.mark.group.height/60"
                  },
                  "scaleY": {
                    "signal": "item.mark.group.height/60"
                  },
                  "path": {
                    "value": "M 0,0 C 0,20 0,40 0,60 20,40 40,20 60,0 40,0 20,0 0,0 Z"
                  },
                  "angle": {"value": 0},
                  "fill": {
                    "signal": "item.mark.group.datum['phase']",
                    "scale": "cStroke"
                  },
                  "stroke": {
                    "signal": "item.mark.group.datum['phase']",
                    "scale": "cStroke"
                  },
                  "tooltip": {
                    "signal": "item.mark.group.datum"
                  }
                }
              }
            },
            {
              "type": "path",
              "name": "phaseEnd",
              "description": "Phase end ",
              "encode": {
                "update": {
                  "x": {
                    "signal": "item.mark.group.width-(item.mark.group.height)+1"
                  },
                  "y": {
                    "signal": "item.mark.group.height"
                  },
                  "strokeWidth": {
                    "value": 0
                  },
                  "scaleX": {
                    "signal": "item.mark.group.height/60"
                  },
                  "scaleY": {
                    "signal": "item.mark.group.height/60"
                  },
                  "path": {
                    "value": "m 60,0 c 0,20 0,40 0,60 C 40,40 20,20 0,0 20,0 40,0 60,0 Z"
                  },
                  "angle": {"value": 0},
                  "fill": {
                    "signal": "item.mark.group.datum['phase']",
                    "scale": "cStroke"
                  },
                  "stroke": {
                    "signal": "item.mark.group.datum['phase']",
                    "scale": "cStroke"
                  },
                  "tooltip": {
                    "signal": "item.mark.group.datum"
                  }
                }
              }
            },
            {
              "name": "taskName",
              "description": "Task name",
              "type": "text",
              "encode": {
                "update": {
                  "x": {
                    "signal": "item.mark.group.width"
                  },
                  "align": {
                    "signal": "'left'"
                  },
                  "dx": {"signal": "5"},
                  "y": {
                    "signal": "item.mark.group.height-bandwidth('y')/4+1"
                  },
                  "baseline": {
                    "value": "middle"
                  },
                  "text": {
                    "signal": "item.mark.group.datum['task'] + ' ('+ item.mark.group.datum.days+' d'+')'"
                  },
                  "fill": {
                    "value": "#666666"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "milestoneSymbols",
          "description": "Milestones",
          "type": "symbol",
          "from": {
            "data": "milestones"
          },
          "encode": {
            "update": {
              "x": {
                "signal": "scale('xDays',datum.encodedStart)+bandwidth('xDays')/2"
              },
              "y": {
                "signal": "scale('y',datum['task'])+bandwidth('y')/2"
              },
              "size": {
                "signal": "pow( min(y_step,x_step),1.85)"
              },
              "shape": {
                "value": "diamond"
              },
              "fill": {
                "signal": "datum[completion] > 0? scale('cStroke', datum['phase']):scale('cFill', datum['phase'])"
              },
              "stroke": {
                "field": "phase",
                "scale": "cStroke"
              },
              "strokeWidth": {
                "value": 1
              },
              "tooltip": {
                "signal": "{'Phase':datum['phase'] ,'Task':datum['task'] , 'Start':timeFormat(datum['start'],'%a, %d %B %Y' ),'End':timeFormat(datum['end'],'%a, %d %B %Y' ), 'Days':datum.days,'Progress':datum[completion]Label }"
              }
            }
          }
        },
        {
          "name": "milestoneName",
          "description": "Milestone name",
          "from": {
            "data": "milestoneSymbols"
          },
          "type": "text",
          "encode": {
            "update": {
              "x": {
                "signal": "datum.x"
              },
              "align": {
                "signal": "'left'"
              },
              "dx": {"signal": "15"},
              "y": {
                "signal": "datum.y"
              },
              "baseline": {
                "value": "middle"
              },
              "text": {
                "signal": "datum.datum['task']"
              },
              "fill": {
                "value": "#666666"
              }
            }
          }
        },
        {
          "name": "dependencyArrowSymbol",
          "description": "Dependency arrows",
          "type": "symbol",
          "from": {
            "data": "dependencyArrows"
          },
          "encode": {
            "update": {
              "shape": {
                "value": "triangle-right"
              },
              "x": {
                "signal": "scale('xDays',datum.encodedStart)-3"
              },
              "y": {
                "signal": "scale('y',datum['task'])+bandwidth('y')/2"
              },
              "fill": {
                "value": "#6a6a6a"
              },
              "size": {
                "signal": "pow( min(y_step,x_step),1.3)"
              }
            }
          }
        }
      ],
      "axes": [
        {
          "description": "Day axis",
          "ticks": true,
          "labelPadding": -12,
          "scale": "xDays",
          "tickSize": 15,
          "orient": "top",
          "bandPosition": 0,
          "grid": false,
          "zindex": 1,
          "encode": {
            "labels": {
              "update": {
                "text": [
                  {
                    "signal": "timeFormat(timeParse(datum.label,'%m/%d/%y'),'%d')"
                  }
                ]
              }
            }
          }
        },
        {
          "description": "Month axis",
          "scale": "xDays",
          "domain": false,
          "orient": "top",
          "offset": 0,
          "tickSize": 25,
          "labelFontSize": 12,
          "bandPosition": 0,
          "grid": false,
          "zindex": 0,
          "encode": {
            "ticks": {
              "update": {
                "strokeOpacity": [
                  {
                    "test": "timeFormat(timeParse(datum.label,'%m/%d/%y'),'%d')   == '01'",
                    "value": 1
                  },
                  {"value": 0}
                ]
              }
            },
            "labels": {
              "update": {
                "text": [
                  {
                    "test": "timeFormat(timeParse(datum.label,'%m/%d/%y'),'%d')   == '15'",
                    "signal": "timeFormat(timeParse(datum.label,'%m/%d/%y'),'%B')"
                  },
                  {"value": ""}
                ]
              }
            }
          }
        },
        {
          "scale": "y",
          "orient": "left",
          "encode": {
            "ticks": {
              "update": {
                "x2": {
                  "signal": "-taskColumn-startColumn-endColumn-daysColumn-progressColumn-(columnPadding*5)-15"
                }
              }
            }
          },
          "tickColor": "#f1f1f1",
          "bandPosition": 1.35,
          "labels": false,
          "title": "",
          "ticks": true,
          "zindex": 0
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "xDays",
      "type": "band",
      "domain": {
        "data": "dayScale",
        "fields": ["encodedDate"]
      },
      "range": {
        "signal": "[0,ganttWidth]"
      }
    },
    {
      "name": "y",
      "type": "band",
      "domain": {
        "fields": [
          {
            "data": "y_scale",
            "field": "task"
          }
        ],
        "sort": {
          "op": "min",
          "field": "finalSort",
          "order": "ascending"
        }
      },
      "range": {
        "step": {"signal": "y_step"}
      },
      "paddingInner": {
        "signal": "yPaddingInner"
      },
      "paddingOuter": {
        "signal": "yPaddingOuter"
      }
    },
    {
      "name": "cStroke",
      "type": "ordinal",
      "range": [
        "hsl(207, 54%, 47%)",
        "hsl(118, 41%, 49%)",
        "hsl(292, 35%, 47%)",
        "hsl(30, 100%, 50%)",
        "hsl(359, 80%, 50%)"
      ],
      "domain": {
        "data": "input",
        "field": "phase",
        "sort": {
          "op": "min",
          "field": "start",
          "order": "ascending"
        }
      }
    },
    {
      "name": "cFill",
      "type": "ordinal",
      "range": [
        "hsl(207, 54%, 77%)",
        "hsl(118, 41%, 79%)",
        "hsl(292, 35%, 77%)",
        "hsl(30, 100%, 80%)",
        "hsl(359, 80%, 80%)"
      ],
      "domain": {
        "data": "input",
        "field": "phase",
        "sort": {
          "op": "min",
          "field": "start",
          "order": "ascending"
        }
      }
    }
  ],
  "config": {
    "view": {"stroke": "transparent"},
    "style": {
      "col": {"fontSize": 11},
      "cell": {
        "strokeWidth": {"signal": "0"}
      }
    },
    "font": "Arial",
    "text": {
      "font": "Arial",
      "fontSize": 10,
      "fill": "#666666"
    },
    "axis": {
      "labelColor": "#666666",
      "labelFontSize": 10,
      "titleFont": "arial",
      "titleColor": "#252423",
      "titleFontSize": 16,
      "titleFontWeight": "normal"
    },
    "axisY": {"labelPadding": 10}
  }
}
